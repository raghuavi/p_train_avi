name: Docs/Stats PR
on:
  schedule:
    - cron: "30 5 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  docs-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Use YOUR PAT for all API/git ops
      - name: Configure git remote with PAT
        env:
          PAT: ${{ secrets.GH_ME_TOKEN }}
        run: |
          set -e
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${PAT}@github.com/${{ github.repository }}.git
          # verify token owner & repo access (fails early if wrong)
          echo "Token user:"
          curl -fsSL -H "Authorization: token ${PAT}" https://api.github.com/user | jq -r .login || true
          echo "Repo permissions:"
          curl -fsSL -H "Authorization: token ${PAT}" https://api.github.com/repos/${{ github.repository }} | jq -r '.permissions' || true
          # quick push test to a throwaway branch
          git checkout -b _auth_test_${{ github.run_id }}
          echo "ok" > .auth_test
          git add .auth_test && git commit -m "auth test"
          if ! git push -u origin HEAD; then
            echo "::error::PAT cannot push to ${{ github.repository }}. Ensure Contents:write and repo access."
            exit 1
          fi
          # cleanup remote test branch (ignore failure)
          curl -fsSL -X DELETE -H "Authorization: token ${PAT}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs/heads/_auth_test_${{ github.run_id }} || true
          git checkout - && git branch -D _auth_test_${{ github.run_id }} || true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Generate docs/stats
        run: |
          python - <<'PY'
          from datetime import datetime, timezone
          from pathlib import Path
          Path("reports").mkdir(exist_ok=True)
          now = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M UTC")
          Path("reports/stats.md").write_text(f"# Daily Stats\n\nLast updated: {now}\n", encoding="utf-8")
          PY

      # Commit and push as YOU using the PAT
      - name: Commit & push branch
        env:
          PAT: ${{ secrets.GH_ME_TOKEN }}
        run: |
          set -e
          git checkout -B auto/docs
          git add reports/stats.md
          git diff --cached --quiet && { echo "No changes"; exit 0; }
          git commit -m "docs: refresh stats"
          git push -u origin auto/docs

      # Open or update the PR (authored by YOU)
      - name: Create or update PR
        env:
          GH_TOKEN: ${{ secrets.GH_ME_TOKEN }}
        run: |
          # if PR from auto/docs exists, just update; else create
          if gh pr view --head auto/docs >/dev/null 2>&1; then
            echo "PR already exists; updated branch."
          else
            gh pr create \
              --base main \
              --head auto/docs \
              --title "Docs: refresh stats" \
              --body "Automated update to reports/stats.md (daily)." \
              --label docs
          fi
